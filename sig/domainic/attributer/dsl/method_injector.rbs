module Domainic
  module Attributer
    module DSL
      # A class responsible for injecting attribute methods into classes
      #
      # This class handles the creation of reader and writer methods for attributes,
      # ensuring they are injected safely without overwriting existing methods. It
      # respects visibility settings and properly handles value assignment through
      # the attribute system
      #
      # @api private
      # @!visibility private
      # @author {https://aaronmallen.me Aaron Allen}
      # @since 0.1.0
      class MethodInjector
        @attribute: Attribute

        @base: __todo__

        # Inject methods for an attribute into a class
        #
        # @param base [Class, Module] the class to inject methods into
        # @param attribute [Attribute] the {Attribute} to create methods for
        #
        # @return [void]
        def self.inject!: (__todo__ base, Attribute attribute) -> void

        # Initialize a new MethodInjector
        #
        # @param base [Class, Module] the class to inject methods into
        # @param attribute [Attribute] the {Attribute} to create methods for
        #
        # @return [MethodInjector] the new MethodInjector instance
        def initialize: (__todo__ base, Attribute attribute) -> void

        # Inject reader and writer methods
        #
        # @return [void]
        def inject!: () -> void

        private

        # Define a method if it doesn't already exist
        #
        # @param method_name [Symbol] the name of the method to define
        #
        # @yield the method body to define
        # @return [void]
        def define_safe_method: (Symbol method_name) { (?) [self: untyped] -> void } -> void

        # Inject the attribute reader method
        #
        # Creates a reader method with the configured visibility
        #
        # @return [void]
        def inject_reader!: () -> void

        # Inject the attribute writer method
        #
        # Creates a writer method that processes values through the attribute
        # system before assignment. Sets the configured visibility
        #
        # @return [void]
        def inject_writer!: () -> void
      end
    end
  end
end
